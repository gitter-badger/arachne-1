syntax = "proto3";

package aql;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

message GraphQuery {
    string graph = 1;
    repeated GraphStatement query = 2;
}

message GraphQuerySet {
  repeated GraphQuery queries = 1;
}

message GraphStatement {
    oneof statement {
        google.protobuf.ListValue v = 1;
        google.protobuf.ListValue e = 2;

        HasStatement has = 5;
        google.protobuf.ListValue has_label = 6;
        google.protobuf.ListValue has_id = 7;
        HasValueStatement has_value = 8;

        google.protobuf.ListValue in = 10;
        google.protobuf.ListValue out = 11;
        google.protobuf.ListValue in_edge = 12;
        google.protobuf.ListValue out_edge = 13;
        google.protobuf.ListValue both = 14;
        google.protobuf.ListValue both_edge = 15;

        string as = 20;
        SelectStatement select = 21;
        SelectStatement values = 22;
        google.protobuf.Value render = 23;

        int64 limit = 25;
        string count = 26;

        string group_count = 30;
        google.protobuf.ListValue distinct = 31;

        GraphQuerySet match = 40;

        //Function Methods
        string import = 50;
        string map = 51;
        FoldStatement fold = 52;
        FoldStatement vertex_fold = 53;
        string filter = 54;
        string filter_values = 55;

        string vertex_from_values = 56;
    }
}

message HasStatement {
    string key = 1;
    repeated string within = 2;
}

enum Condition {
  UNKNOWN_CONDITION = 0;
  EQ  = 1;
  NEQ = 2;
  GT  = 3;
  GTE = 4;
  LT  = 5;
  LTE = 6;
  BETWEEN = 7;
  INSIDE = 8;
  OUTSIDE = 9;
  WITHIN = 10;
  WITHOUT = 11;
}

message HasValueStatement {
  string key1 = 1;
  string key2 = 2;
  Condition condition = 3;
}

message SelectStatement {
    repeated string labels = 1;
}

message FoldStatement {
  string source = 1;
  google.protobuf.Value init = 2;
}

message VertexMatch {
  string field = 1;
  string value = 2;
  Condition op = 3;
}

message GenMatch {
  string field = 1;
  repeated VertexMatch match = 2;
  string data = 3;
}

message EdgeGen {
  string gid = 1;
  string from_label = 2;
  string to_label = 3;
  oneof build {
    GenMatch unzip = 4;
    GenMatch range = 5;
    GenMatch match = 6;
  }
}

message EdgeGenCreate {
  string graph = 1;
  EdgeGen gen = 2;
}

message Vertex {
  string gid = 1;
  string label = 2;
  google.protobuf.Struct data = 3;
}

message Edge {
  string gid = 1;
  string label = 2;
  string from = 3;
  string to = 4;
  google.protobuf.Struct data = 5;
}

message QueryResult {
    oneof result {
      Vertex vertex = 1;
      Edge edge = 2;
      google.protobuf.Value data = 4;
    }
}

message ResultRow {
  QueryResult value = 1;
  repeated QueryResult row = 2;
}

message EditResult {
  oneof result {
    string error = 1;
    string id = 2;
  }
}

message GraphElement {
  string graph = 1;
  Vertex vertex = 2;
  Edge edge = 3;
}

message Graph {
  string graph = 1;
  repeated Edge edges = 2;
  repeated Vertex vertices = 3;
}


message GraphID {
  string graph = 1;
}

message ElementID {
  string graph = 1;
  string id = 2;
}

enum ElementType {
  UNKNOWN_TYPE = 0;
  VERTEX = 1;
  EDGE = 2;
}

message IndexID {
  string graph = 1;
  string label = 2;
  string field = 3;
  ElementType type = 4;
}

message IndexQuery {
  string graph = 1;
  string label = 2;
  string field = 3;
  ElementType type = 4;
  repeated GraphStatement query = 5;
}

message IndexTermCount {
  google.protobuf.Value term = 1;
  int32 count = 2;
}

message Timestamp {
  string timestamp = 1;
}

message Empty {

}

service Query {
  rpc Traversal(GraphQuery) returns (stream ResultRow) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/query"
      body: "*"
    };
  }

  rpc GetVertex(ElementID) returns (Vertex) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/vertex/{id}"
    };
  }

  rpc GetEdge(ElementID) returns (Edge) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/edge/{id}"
    };
  }

  rpc GetGraphs(Empty) returns (stream ElementID) {
    option (google.api.http) = {
      get: "/v1/graph"
    };
  }

  rpc GetIndexList(GraphID) returns (stream IndexID) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/index"
    };
  }

  rpc GetIndex(IndexID) returns (stream IndexTermCount) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/index/{label}/{field}"
    };
  }

  rpc ListEdgeGen(GraphID) returns (stream ElementID) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/edgegen"
    };
  }

  rpc GetEdgeGen(ElementID) returns (EdgeGen) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/edgegen/{id}"
    };
  }

  rpc IndexTraversal(IndexQuery) returns (stream ResultRow) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/index/{label}/{field}"
      body: "*"
    };
  }

  rpc GetTimestamp(ElementID) returns (Timestamp) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/timestamp"
    };
  }

}

service Edit {
  rpc AddVertex(GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/vertex"
      body: "vertex"
    };
  }

  rpc AddEdge(GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/edge"
      body: "edge"
    };
  }

  rpc StreamElements(stream GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph"
    };
  }

  rpc AddGraph(ElementID) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}"
    };
  }

  rpc AddSubGraph(Graph) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/subgraph"
      body: "*"
    };
  }

  rpc DeleteGraph(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}"
    };
  }

  rpc DeleteVertex(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/vertex/{id}"
    };
  }

  rpc DeleteEdge(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/edge/{id}"
    };
  }

  rpc AddIndex(IndexID) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/index/{label}"
      body: "*"
    };
  }

  rpc DeleteIndex(IndexID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/index/{label}/{field}"
    };
  }

  rpc AddEdgeGen(EdgeGenCreate) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/edgegen"
      body: "*"
    };
  }

  rpc DeleteEdgeGen(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/edgegen/{id}"
    };
  }

}
